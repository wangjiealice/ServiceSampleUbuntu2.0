{"version":3,"file":"Observable.js","sourceRoot":"","sources":["../../src/Observable.ts"],"names":[],"mappings":"AAAA,sDAAsD;AACtD,+GAA+G;AAW/G,MAAM;IAIF,YAAY,OAAmB,EAAE,QAAqB;QAClD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC7B,CAAC;IAEM,OAAO;QACV,IAAI,KAAK,GAAW,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAClE,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YACb,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YACtC,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC;QACpD,CAAC;IACL,CAAC;CACJ;AAMD,MAAM;IAIF,YAAY,cAAmC;QAC3C,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IACzC,CAAC;IAEM,IAAI,CAAC,IAAO;QACf,GAAG,CAAC,CAAC,IAAI,QAAQ,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YAClC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACxB,CAAC;IACL,CAAC;IAEM,KAAK,CAAC,GAAQ;QACjB,GAAG,CAAC,CAAC,IAAI,QAAQ,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YAClC,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;gBACjB,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACxB,CAAC;QACL,CAAC;IACL,CAAC;IAEM,QAAQ;QACX,GAAG,CAAC,CAAC,IAAI,QAAQ,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YAClC,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACpB,QAAQ,CAAC,QAAQ,EAAE,CAAC;YACxB,CAAC;QACL,CAAC;IACL,CAAC;IAEM,SAAS,CAAC,QAAqB;QAClC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC9B,MAAM,CAAC,IAAI,YAAY,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAC5C,CAAC;CACJ","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\n\n// TODO: Seamless RxJs integration\n// From RxJs: https://github.com/ReactiveX/rxjs/blob/master/src/Observer.ts\nexport interface Observer<T> {\n    closed?: boolean;\n    next: (value: T) => void;\n    error?: (err: any) => void;\n    complete?: () => void;\n}\n\nexport class Subscription<T> {\n    subject: Subject<T>;\n    observer: Observer<T>;\n\n    constructor(subject: Subject<T>, observer: Observer<T>) {\n        this.subject = subject;\n        this.observer = observer;\n    }\n\n    public dispose(): void {\n        let index: number = this.subject.observers.indexOf(this.observer);\n        if (index > -1) {\n            this.subject.observers.splice(index, 1);\n        }\n\n        if (this.subject.observers.length === 0) {\n            this.subject.cancelCallback().catch((_) => { });\n        }\n    }\n}\n\nexport interface Observable<T> {\n    subscribe(observer: Observer<T>): Subscription<T>;\n}\n\nexport class Subject<T> implements Observable<T> {\n    observers: Observer<T>[];\n    cancelCallback: () => Promise<void>;\n\n    constructor(cancelCallback: () => Promise<void>) {\n        this.observers = [];\n        this.cancelCallback = cancelCallback;\n    }\n\n    public next(item: T): void {\n        for (let observer of this.observers) {\n            observer.next(item);\n        }\n    }\n\n    public error(err: any): void {\n        for (let observer of this.observers) {\n            if (observer.error) {\n                observer.error(err);\n            }\n        }\n    }\n\n    public complete(): void {\n        for (let observer of this.observers) {\n            if (observer.complete) {\n                observer.complete();\n            }\n        }\n    }\n\n    public subscribe(observer: Observer<T>): Subscription<T> {\n        this.observers.push(observer);\n        return new Subscription(this, observer);\n    }\n}\n"]}