{"version":3,"file":"IHubProtocol.js","sourceRoot":"","sources":["../../src/IHubProtocol.ts"],"names":[],"mappings":"AAAA,sDAAsD;AACtD,+GAA+G","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\n\nexport const enum MessageType {\n    Invocation = 1,\n    StreamItem = 2,\n    Completion = 3,\n    StreamInvocation = 4,\n    CancelInvocation = 5,\n    Ping = 6,\n}\n\nexport interface HubMessage {\n    readonly type: MessageType;\n}\n\nexport interface InvocationMessage extends HubMessage {\n    readonly invocationId?: string;\n    readonly target: string;\n    readonly arguments: Array<any>;\n}\n\nexport interface StreamInvocationMessage extends HubMessage {\n    readonly invocationId: string;\n    readonly target: string;\n    readonly arguments: Array<any>\n}\n\nexport interface ResultMessage extends HubMessage {\n    readonly invocationId: string;\n    readonly item?: any;\n}\n\nexport interface CompletionMessage extends HubMessage {\n    readonly invocationId: string;\n    readonly error?: string;\n    readonly result?: any;\n}\n\nexport interface NegotiationMessage {\n    readonly protocol: string;\n}\n\nexport interface CancelInvocation extends HubMessage {\n    readonly invocationId: string;\n}\n\nexport const enum ProtocolType {\n    Text = 1,\n    Binary\n}\n\nexport interface IHubProtocol {\n    readonly name: string;\n    readonly type: ProtocolType;\n    parseMessages(input: any): HubMessage[];\n    writeMessage(message: HubMessage): any;\n}\n"]}