{"version":3,"file":"HttpClient.js","sourceRoot":"","sources":["../../src/HttpClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\n\nimport { TimeoutError, HttpError } from \"./Errors\";\nimport { AbortSignal } from \"./AbortController\";\n\nexport interface HttpRequest {\n    method?: string,\n    url?: string,\n    content?: string | ArrayBuffer,\n    headers?: Map<string, string>,\n    responseType?: XMLHttpRequestResponseType,\n    abortSignal?: AbortSignal,\n    timeout?: number,\n}\n\nexport class HttpResponse {\n    constructor(statusCode: number, statusText: string, content: string);\n    constructor(statusCode: number, statusText: string, content: ArrayBuffer);\n    constructor(\n        public readonly statusCode: number,\n        public readonly statusText: string,\n        public readonly content: string | ArrayBuffer) {\n    }\n}\n\nexport abstract class HttpClient {\n    get(url: string): Promise<HttpResponse>;\n    get(url: string, options: HttpRequest): Promise<HttpResponse>;\n    get(url: string, options?: HttpRequest): Promise<HttpResponse> {\n        return this.send({\n            ...options,\n            method: \"GET\",\n            url: url,\n        });\n    }\n\n    post(url: string): Promise<HttpResponse>;\n    post(url: string, options: HttpRequest): Promise<HttpResponse>;\n    post(url: string, options?: HttpRequest): Promise<HttpResponse> {\n        return this.send({\n            ...options,\n            method: \"POST\",\n            url: url,\n        });\n    }\n\n    abstract send(request: HttpRequest): Promise<HttpResponse>;\n}\n\nexport class DefaultHttpClient extends HttpClient {\n    send(request: HttpRequest): Promise<HttpResponse> {\n        return new Promise<HttpResponse>((resolve, reject) => {\n            let xhr = new XMLHttpRequest();\n\n            xhr.open(request.method, request.url, true);\n            xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n\n            if (request.headers) {\n                request.headers.forEach((value, header) => xhr.setRequestHeader(header, value));\n            }\n\n            if (request.responseType) {\n                xhr.responseType = request.responseType;\n            }\n\n            if (request.abortSignal) {\n                request.abortSignal.onabort = () => {\n                    xhr.abort();\n                };\n            }\n\n            if (request.timeout) {\n                xhr.timeout = request.timeout;\n            }\n\n            xhr.onload = () => {\n                if (request.abortSignal) {\n                    request.abortSignal.onabort = null;\n                }\n\n                if (xhr.status >= 200 && xhr.status < 300) {\n                    resolve(new HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText))\n                }\n                else {\n                    reject(new HttpError(xhr.statusText, xhr.status));\n                }\n            };\n\n            xhr.onerror = () => {\n                reject(new HttpError(xhr.statusText, xhr.status));\n            }\n\n            xhr.ontimeout = () => {\n                reject(new TimeoutError());\n            }\n\n            xhr.send(request.content || \"\");\n        });\n    }\n}\n"]}