{"version":3,"file":"AbortController.js","sourceRoot":"","sources":["../../src/AbortController.ts"],"names":[],"mappings":"AAAA,sDAAsD;AACtD,+GAA+G;AAE/G,qFAAqF;AACrF,0FAA0F;AAC1F,iCAAiC;AAEjC,MAAM;IAAN;QACY,cAAS,GAAY,KAAK,CAAC;IAmBvC,CAAC;IAhBG,KAAK;QACD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBACf,IAAI,CAAC,OAAO,EAAE,CAAC;YACnB,CAAC;QACL,CAAC;IACL,CAAC;IAED,IAAI,MAAM;QACN,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED,IAAI,OAAO;QACP,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;IAC1B,CAAC;CACJ","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\n\n// Rough polyfill of https://developer.mozilla.org/en-US/docs/Web/API/AbortController\n// We don't actually ever use the API being polyfilled, we always use the polyfill because\n// it's a very new API right now.\n\nexport class AbortController implements AbortSignal {\n    private isAborted: boolean = false;\n    public onabort: () => void;\n\n    abort() {\n        if (!this.isAborted) {\n            this.isAborted = true;\n            if (this.onabort) {\n                this.onabort();\n            }\n        }\n    }\n\n    get signal(): AbortSignal {\n        return this;\n    }\n\n    get aborted(): boolean {\n        return this.isAborted;\n    }\n}\n\nexport interface AbortSignal {\n    aborted: boolean;\n    onabort: () => void;\n}\n"]}