{"version":3,"file":"HubConnection.js","sourceRoot":"","sources":["../../src/HubConnection.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\n\nimport { ConnectionClosed } from \"./Common\"\nimport { IConnection } from \"./IConnection\"\nimport { HttpConnection, IHttpConnectionOptions } from \"./HttpConnection\"\nimport { TransportType, TransferMode } from \"./Transports\"\nimport { Subject, Observable } from \"./Observable\"\nimport { IHubProtocol, ProtocolType, MessageType, HubMessage, CompletionMessage, ResultMessage, InvocationMessage, StreamInvocationMessage, NegotiationMessage, CancelInvocation } from \"./IHubProtocol\";\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\nimport { TextMessageFormat } from \"./TextMessageFormat\"\nimport { Base64EncodedHubProtocol } from \"./Base64EncodedHubProtocol\"\nimport { ILogger, LogLevel } from \"./ILogger\"\nimport { ConsoleLogger, NullLogger, LoggerFactory } from \"./Loggers\"\n\nexport { JsonHubProtocol }\n\nexport interface IHubConnectionOptions extends IHttpConnectionOptions {\n    protocol?: IHubProtocol;\n    timeoutInMilliseconds?: number;\n}\n\nconst DEFAULT_TIMEOUT_IN_MS: number = 30 * 1000;\n\nexport class HubConnection {\n    private readonly connection: IConnection;\n    private readonly logger: ILogger;\n    private protocol: IHubProtocol;\n    private callbacks: Map<string, (invocationEvent: HubMessage, error?: Error) => void>;\n    private methods: Map<string, ((...args: any[]) => void)[]>;\n    private id: number;\n    private closedCallbacks: ConnectionClosed[];\n    private timeoutHandle: NodeJS.Timer;\n    private timeoutInMilliseconds: number;\n\n    constructor(url: string, options?: IHubConnectionOptions);\n    constructor(connection: IConnection, options?: IHubConnectionOptions);\n    constructor(urlOrConnection: string | IConnection, options: IHubConnectionOptions = {}) {\n        options = options || {};\n\n        this.timeoutInMilliseconds = options.timeoutInMilliseconds || DEFAULT_TIMEOUT_IN_MS;\n\n        if (typeof urlOrConnection === \"string\") {\n            this.connection = new HttpConnection(urlOrConnection, options);\n        }\n        else {\n            this.connection = urlOrConnection;\n        }\n\n        this.logger = LoggerFactory.createLogger(options.logger);\n\n        this.protocol = options.protocol || new JsonHubProtocol();\n        this.connection.onreceive = (data: any) => this.processIncomingData(data);\n        this.connection.onclose = (error?: Error) => this.connectionClosed(error);\n\n        this.callbacks = new Map<string, (invocationEvent: HubMessage, error?: Error) => void>();\n        this.methods = new Map<string, ((...args: any[]) => void)[]>();\n        this.closedCallbacks = [];\n        this.id = 0;\n    }\n\n    private processIncomingData(data: any) {\n        if (this.timeoutHandle !== undefined) {\n            clearTimeout(this.timeoutHandle);\n        }\n\n        // Parse the messages\n        let messages = this.protocol.parseMessages(data);\n\n        for (var i = 0; i < messages.length; ++i) {\n            var message = messages[i];\n\n            switch (message.type) {\n                case MessageType.Invocation:\n                    this.invokeClientMethod(<InvocationMessage>message);\n                    break;\n                case MessageType.StreamItem:\n                case MessageType.Completion:\n                    let callback = this.callbacks.get((<any>message).invocationId);\n                    if (callback != null) {\n                        if (message.type === MessageType.Completion) {\n                            this.callbacks.delete((<any>message).invocationId);\n                        }\n                        callback(message);\n                    }\n                    break;\n                case MessageType.Ping:\n                    // Don't care about pings\n                    break;\n                default:\n                    this.logger.log(LogLevel.Warning, \"Invalid message type: \" + data);\n                    break;\n            }\n        }\n\n        this.configureTimeout();\n    }\n\n    private configureTimeout() {\n        if (!this.connection.features || !this.connection.features.inherentKeepAlive) {\n            // Set the timeout timer\n            this.timeoutHandle = setTimeout(() => this.serverTimeout(), this.timeoutInMilliseconds);\n        }\n    }\n\n    private serverTimeout() {\n        // The server hasn't talked to us in a while. It doesn't like us anymore ... :(\n        // Terminate the connection\n        this.connection.stop(new Error(\"Server timeout elapsed without receiving a message from the server.\"));\n    }\n\n    private invokeClientMethod(invocationMessage: InvocationMessage) {\n        let methods = this.methods.get(invocationMessage.target.toLowerCase());\n        if (methods) {\n            methods.forEach(m => m.apply(this, invocationMessage.arguments));\n            if (invocationMessage.invocationId) {\n                // This is not supported in v1. So we return an error to avoid blocking the server waiting for the response.\n                let message = \"Server requested a response, which is not supported in this version of the client.\"\n                this.logger.log(LogLevel.Error, message);\n                this.connection.stop(new Error(message))\n            }\n        }\n        else {\n            this.logger.log(LogLevel.Warning, `No client method with the name '${invocationMessage.target}' found.`);\n        }\n    }\n\n    private connectionClosed(error?: Error) {\n        this.callbacks.forEach(callback => {\n            callback(undefined, error ? error : new Error(\"Invocation canceled due to connection being closed.\"));\n        });\n        this.callbacks.clear();\n\n        this.closedCallbacks.forEach(c => c.apply(this, [error]));\n\n        this.cleanupTimeout();\n    }\n\n    async start(): Promise<void> {\n        let requestedTransferMode =\n            (this.protocol.type === ProtocolType.Binary)\n                ? TransferMode.Binary\n                : TransferMode.Text;\n\n        this.connection.features.transferMode = requestedTransferMode\n        await this.connection.start();\n        var actualTransferMode = this.connection.features.transferMode;\n\n        await this.connection.send(\n            TextMessageFormat.write(\n                JSON.stringify(<NegotiationMessage>{ protocol: this.protocol.name })));\n\n        this.logger.log(LogLevel.Information, `Using HubProtocol '${this.protocol.name}'.`);\n\n        if (requestedTransferMode === TransferMode.Binary && actualTransferMode === TransferMode.Text) {\n            this.protocol = new Base64EncodedHubProtocol(this.protocol);\n        }\n\n        this.configureTimeout();\n    }\n\n    stop(): Promise<void> {\n        this.cleanupTimeout();\n        return this.connection.stop();\n    }\n\n    stream<T>(methodName: string, ...args: any[]): Observable<T> {\n        let invocationDescriptor = this.createStreamInvocation(methodName, args);\n\n        let subject = new Subject<T>(() => {\n            let cancelInvocation: CancelInvocation = this.createCancelInvocation(invocationDescriptor.invocationId);\n            let message: any = this.protocol.writeMessage(cancelInvocation);\n\n            this.callbacks.delete(invocationDescriptor.invocationId);\n\n            return this.connection.send(message);\n        });\n\n        this.callbacks.set(invocationDescriptor.invocationId, (invocationEvent: HubMessage, error?: Error) => {\n            if (error) {\n                subject.error(error);\n                return;\n            }\n\n            if (invocationEvent.type === MessageType.Completion) {\n                let completionMessage = <CompletionMessage>invocationEvent;\n                if (completionMessage.error) {\n                    subject.error(new Error(completionMessage.error));\n                }\n                else {\n                    subject.complete();\n                }\n            }\n            else {\n                subject.next(<T>(<ResultMessage>invocationEvent).item);\n            }\n        });\n\n        let message = this.protocol.writeMessage(invocationDescriptor);\n\n        this.connection.send(message)\n            .catch(e => {\n                subject.error(e);\n                this.callbacks.delete(invocationDescriptor.invocationId);\n            });\n\n        return subject;\n    }\n\n    send(methodName: string, ...args: any[]): Promise<void> {\n        let invocationDescriptor = this.createInvocation(methodName, args, true);\n\n        let message = this.protocol.writeMessage(invocationDescriptor);\n\n        return this.connection.send(message);\n    }\n\n    invoke(methodName: string, ...args: any[]): Promise<any> {\n        let invocationDescriptor = this.createInvocation(methodName, args, false);\n\n        let p = new Promise<any>((resolve, reject) => {\n            this.callbacks.set(invocationDescriptor.invocationId, (invocationEvent: HubMessage, error?: Error) => {\n                if (error) {\n                    reject(error);\n                    return;\n                }\n                if (invocationEvent.type === MessageType.Completion) {\n                    let completionMessage = <CompletionMessage>invocationEvent;\n                    if (completionMessage.error) {\n                        reject(new Error(completionMessage.error));\n                    }\n                    else {\n                        resolve(completionMessage.result);\n                    }\n                }\n                else {\n                    reject(new Error(`Unexpected message type: ${invocationEvent.type}`));\n                }\n            });\n\n            let message = this.protocol.writeMessage(invocationDescriptor);\n\n            this.connection.send(message)\n                .catch(e => {\n                    reject(e);\n                    this.callbacks.delete(invocationDescriptor.invocationId);\n                });\n        });\n\n        return p;\n    }\n\n    on(methodName: string, method: (...args: any[]) => void) {\n        if (!methodName || !method) {\n            return;\n        }\n\n        methodName = methodName.toLowerCase();\n        if (!this.methods.has(methodName)) {\n            this.methods.set(methodName, []);\n        }\n\n        this.methods.get(methodName).push(method);\n    }\n\n    off(methodName: string, method: (...args: any[]) => void) {\n        if (!methodName || !method) {\n            return;\n        }\n\n        methodName = methodName.toLowerCase();\n        let handlers = this.methods.get(methodName);\n        if (!handlers) {\n            return;\n        }\n        var removeIdx = handlers.indexOf(method);\n        if (removeIdx != -1) {\n            handlers.splice(removeIdx, 1);\n        }\n    }\n\n    onclose(callback: ConnectionClosed) {\n        if (callback) {\n            this.closedCallbacks.push(callback);\n        }\n    }\n\n    private cleanupTimeout(): void {\n        if (this.timeoutHandle) {\n            clearTimeout(this.timeoutHandle);\n        }\n    }\n\n    private createInvocation(methodName: string, args: any[], nonblocking: boolean): InvocationMessage {\n        if (nonblocking) {\n            return {\n                type: MessageType.Invocation,\n                target: methodName,\n                arguments: args,\n            };\n        }\n        else {\n            let id = this.id;\n            this.id++;\n\n            return {\n                type: MessageType.Invocation,\n                invocationId: id.toString(),\n                target: methodName,\n                arguments: args,\n            };\n        }\n    }\n\n    private createStreamInvocation(methodName: string, args: any[]): StreamInvocationMessage {\n        let id = this.id;\n        this.id++;\n\n        return {\n            type: MessageType.StreamInvocation,\n            invocationId: id.toString(),\n            target: methodName,\n            arguments: args,\n        };\n    }\n\n    private createCancelInvocation(id: string): CancelInvocation {\n        return {\n            type: MessageType.CancelInvocation,\n            invocationId: id,\n        };\n    }\n}\n"]}