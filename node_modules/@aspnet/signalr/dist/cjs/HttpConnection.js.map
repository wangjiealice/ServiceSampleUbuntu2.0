{"version":3,"file":"HttpConnection.js","sourceRoot":"","sources":["../../src/HttpConnection.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\n\nimport { DataReceived, ConnectionClosed } from \"./Common\"\nimport { IConnection } from \"./IConnection\"\nimport { ITransport, TransferMode, TransportType, WebSocketTransport, ServerSentEventsTransport, LongPollingTransport } from \"./Transports\"\nimport { HttpClient, DefaultHttpClient } from \"./HttpClient\"\nimport { ILogger, LogLevel } from \"./ILogger\"\nimport { LoggerFactory } from \"./Loggers\"\n\nexport interface IHttpConnectionOptions {\n    httpClient?: HttpClient;\n    transport?: TransportType | ITransport;\n    logger?: ILogger | LogLevel;\n    accessTokenFactory?: () => string;\n}\n\nconst enum ConnectionState {\n    Connecting,\n    Connected,\n    Disconnected\n}\n\ninterface INegotiateResponse {\n    connectionId: string\n    availableTransports: string[]\n}\n\nexport class HttpConnection implements IConnection {\n    private connectionState: ConnectionState;\n    private baseUrl: string;\n    private url: string;\n    private readonly httpClient: HttpClient;\n    private readonly logger: ILogger;\n    private readonly options: IHttpConnectionOptions;\n    private transport: ITransport;\n    private connectionId: string;\n    private startPromise: Promise<void>;\n\n    readonly features: any = {};\n\n    constructor(url: string, options: IHttpConnectionOptions = {}) {\n        this.logger = LoggerFactory.createLogger(options.logger);\n        this.baseUrl = this.resolveUrl(url);\n\n        options = options || {};\n        options.accessTokenFactory = options.accessTokenFactory || (() => null);\n\n        this.httpClient = options.httpClient || new DefaultHttpClient();\n        this.connectionState = ConnectionState.Disconnected;\n        this.options = options;\n    }\n\n    async start(): Promise<void> {\n        if (this.connectionState !== ConnectionState.Disconnected) {\n            return Promise.reject(new Error(\"Cannot start a connection that is not in the 'Disconnected' state.\"));\n        }\n\n        this.connectionState = ConnectionState.Connecting;\n\n        this.startPromise = this.startInternal();\n        return this.startPromise;\n    }\n\n    private async startInternal(): Promise<void> {\n        try {\n            if (this.options.transport === TransportType.WebSockets) {\n                // No need to add a connection ID in this case\n                this.url = this.baseUrl;\n                this.transport = this.createTransport(this.options.transport, [TransportType[TransportType.WebSockets]]);\n            }\n            else {\n                let headers;\n                let token = this.options.accessTokenFactory();\n                if (token) {\n                    headers = new Map<string, string>();\n                    headers.set(\"Authorization\", `Bearer ${token}`);\n                }\n\n                let negotiatePayload = await this.httpClient.post(this.resolveNegotiateUrl(this.baseUrl), {\n                    content: \"\",\n                    headers\n                });\n\n                let negotiateResponse: INegotiateResponse = JSON.parse(<string>negotiatePayload.content);\n                this.connectionId = negotiateResponse.connectionId;\n\n                // the user tries to stop the the connection when it is being started\n                if (this.connectionState == ConnectionState.Disconnected) {\n                    return;\n                }\n\n                if (this.connectionId) {\n                    this.url = this.baseUrl + (this.baseUrl.indexOf(\"?\") === -1 ? \"?\" : \"&\") + `id=${this.connectionId}`;\n                    this.transport = this.createTransport(this.options.transport, negotiateResponse.availableTransports);\n                }\n            }\n\n            this.transport.onreceive = this.onreceive;\n            this.transport.onclose = e => this.stopConnection(true, e);\n\n            let requestedTransferMode =\n                this.features.transferMode === TransferMode.Binary\n                    ? TransferMode.Binary\n                    : TransferMode.Text;\n\n            this.features.transferMode = await this.transport.connect(this.url, requestedTransferMode, this);\n\n            // only change the state if we were connecting to not overwrite\n            // the state if the connection is already marked as Disconnected\n            this.changeState(ConnectionState.Connecting, ConnectionState.Connected);\n        }\n        catch (e) {\n            this.logger.log(LogLevel.Error, \"Failed to start the connection. \" + e);\n            this.connectionState = ConnectionState.Disconnected;\n            this.transport = null;\n            throw e;\n        };\n    }\n\n    private createTransport(transport: TransportType | ITransport, availableTransports: string[]): ITransport {\n        if ((transport === null || transport === undefined) && availableTransports.length > 0) {\n            transport = TransportType[availableTransports[0]];\n        }\n        if (transport === TransportType.WebSockets && availableTransports.indexOf(TransportType[transport]) >= 0) {\n            return new WebSocketTransport(this.options.accessTokenFactory, this.logger);\n        }\n        if (transport === TransportType.ServerSentEvents && availableTransports.indexOf(TransportType[transport]) >= 0) {\n            return new ServerSentEventsTransport(this.httpClient, this.options.accessTokenFactory, this.logger);\n        }\n        if (transport === TransportType.LongPolling && availableTransports.indexOf(TransportType[transport]) >= 0) {\n            return new LongPollingTransport(this.httpClient, this.options.accessTokenFactory, this.logger);\n        }\n\n        if (this.isITransport(transport)) {\n            return transport;\n        }\n\n        throw new Error(\"No available transports found.\");\n    }\n\n    private isITransport(transport: any): transport is ITransport {\n        return typeof (transport) === \"object\" && \"connect\" in transport;\n    }\n\n    private changeState(from: ConnectionState, to: ConnectionState): Boolean {\n        if (this.connectionState == from) {\n            this.connectionState = to;\n            return true;\n        }\n        return false;\n    }\n\n    send(data: any): Promise<void> {\n        if (this.connectionState != ConnectionState.Connected) {\n            throw new Error(\"Cannot send data if the connection is not in the 'Connected' State\");\n        }\n\n        return this.transport.send(data);\n    }\n\n    async stop(error?: Error): Promise<void> {\n        let previousState = this.connectionState;\n        this.connectionState = ConnectionState.Disconnected;\n\n        try {\n            await this.startPromise;\n        }\n        catch (e) {\n            // this exception is returned to the user as a rejected Promise from the start method\n        }\n        this.stopConnection(/*raiseClosed*/ previousState == ConnectionState.Connected, error);\n    }\n\n    private stopConnection(raiseClosed: Boolean, error?: Error) {\n        if (this.transport) {\n            this.transport.stop();\n            this.transport = null;\n        }\n\n        if (error) {\n            this.logger.log(LogLevel.Error, `Connection disconnected with error '${error}'.`);\n        } else {\n            this.logger.log(LogLevel.Information, \"Connection disconnected.\");\n        }\n\n        this.connectionState = ConnectionState.Disconnected;\n\n        if (raiseClosed && this.onclose) {\n            this.onclose(error);\n        }\n    }\n\n    private resolveUrl(url: string): string {\n        // startsWith is not supported in IE\n        if (url.lastIndexOf(\"https://\", 0) === 0 || url.lastIndexOf(\"http://\", 0) === 0) {\n            return url;\n        }\n\n        if (typeof window === 'undefined' || !window || !window.document) {\n            throw new Error(`Cannot resolve '${url}'.`);\n        }\n\n        let parser = window.document.createElement(\"a\");\n        parser.href = url;\n\n        let baseUrl = (!parser.protocol || parser.protocol === \":\")\n            ? `${window.document.location.protocol}//${(parser.host || window.document.location.host)}`\n            : `${parser.protocol}//${parser.host}`;\n\n        if (!url || url[0] != '/') {\n            url = '/' + url;\n        }\n\n        let normalizedUrl = baseUrl + url;\n        this.logger.log(LogLevel.Information, `Normalizing '${url}' to '${normalizedUrl}'`);\n        return normalizedUrl;\n    }\n\n    private resolveNegotiateUrl(url: string): string {\n        let index = url.indexOf(\"?\");\n        let negotiateUrl = url.substring(0, index === -1 ? url.length : index);\n        if (negotiateUrl[negotiateUrl.length - 1] !== \"/\") {\n            negotiateUrl += \"/\";\n        }\n        negotiateUrl += \"negotiate\";\n        negotiateUrl += index === -1 ? \"\" : url.substring(index);\n        return negotiateUrl;\n    }\n\n    onreceive: DataReceived;\n    onclose: ConnectionClosed;\n}\n"]}