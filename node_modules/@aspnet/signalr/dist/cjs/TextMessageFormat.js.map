{"version":3,"file":"TextMessageFormat.js","sourceRoot":"","sources":["../../src/TextMessageFormat.ts"],"names":[],"mappings":";AAAA,sDAAsD;AACtD,+GAA+G;;AAE/G;IAAA;IAgBA,CAAC;IAbU,uBAAK,GAAZ,UAAa,MAAc;QACvB,MAAM,CAAC,KAAG,MAAM,GAAG,iBAAiB,CAAC,eAAiB,CAAC;IAC3D,CAAC;IAEM,uBAAK,GAAZ,UAAa,KAAa;QACtB,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,iBAAiB,CAAC,eAAe,CAAC,CAAC,CAAC;YAC/D,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;QAC9C,CAAC;QAED,IAAI,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,iBAAiB,CAAC,eAAe,CAAC,CAAC;QAC9D,QAAQ,CAAC,GAAG,EAAE,CAAC;QACf,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IAdM,iCAAe,GAAG,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;IAevD,wBAAC;CAAA,AAhBD,IAgBC;AAhBY,8CAAiB","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\n\nexport class TextMessageFormat {\n    static RecordSeparator = String.fromCharCode(0x1e);\n\n    static write(output: string): string {\n        return `${output}${TextMessageFormat.RecordSeparator}`;\n    }\n\n    static parse(input: string): string[] {\n        if (input[input.length - 1] != TextMessageFormat.RecordSeparator) {\n            throw new Error(\"Message is incomplete.\");\n        }\n\n        let messages = input.split(TextMessageFormat.RecordSeparator);\n        messages.pop();\n        return messages;\n    }\n}\n"]}