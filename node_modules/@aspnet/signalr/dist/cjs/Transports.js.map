{"version":3,"file":"Transports.js","sourceRoot":"","sources":["../../src/Transports.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\n\nimport { DataReceived, TransportClosed } from \"./Common\";\nimport { HttpClient, HttpRequest } from \"./HttpClient\";\nimport { HttpError, TimeoutError } from \"./Errors\";\nimport { ILogger, LogLevel } from \"./ILogger\";\nimport { IConnection } from \"./IConnection\";\nimport { AbortController } from \"./AbortController\";\n\nexport enum TransportType {\n    WebSockets,\n    ServerSentEvents,\n    LongPolling\n}\n\nexport const enum TransferMode {\n    Text = 1,\n    Binary\n}\n\nexport interface ITransport {\n    connect(url: string, requestedTransferMode: TransferMode, connection: IConnection): Promise<TransferMode>;\n    send(data: any): Promise<void>;\n    stop(): Promise<void>;\n    onreceive: DataReceived;\n    onclose: TransportClosed;\n}\n\nexport class WebSocketTransport implements ITransport {\n    private readonly logger: ILogger;\n    private readonly accessTokenFactory: () => string;\n    private webSocket: WebSocket;\n\n    constructor(accessTokenFactory: () => string, logger: ILogger) {\n        this.logger = logger;\n        this.accessTokenFactory = accessTokenFactory || (() => null);\n    }\n\n    connect(url: string, requestedTransferMode: TransferMode, connection: IConnection): Promise<TransferMode> {\n\n        return new Promise<TransferMode>((resolve, reject) => {\n            url = url.replace(/^http/, \"ws\");\n            let token = this.accessTokenFactory();\n            if (token) {\n                url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\n            }\n\n            let webSocket = new WebSocket(url);\n            if (requestedTransferMode == TransferMode.Binary) {\n                webSocket.binaryType = \"arraybuffer\";\n            }\n\n            webSocket.onopen = (event: Event) => {\n                this.logger.log(LogLevel.Information, `WebSocket connected to ${url}`);\n                this.webSocket = webSocket;\n                resolve(requestedTransferMode);\n            };\n\n            webSocket.onerror = (event: Event) => {\n                reject();\n            };\n\n            webSocket.onmessage = (message: MessageEvent) => {\n                this.logger.log(LogLevel.Trace, `(WebSockets transport) data received: ${message.data}`);\n                if (this.onreceive) {\n                    this.onreceive(message.data);\n                }\n            }\n\n            webSocket.onclose = (event: CloseEvent) => {\n                // webSocket will be null if the transport did not start successfully\n                if (this.onclose && this.webSocket) {\n                    if (event.wasClean === false || event.code !== 1000) {\n                        this.onclose(new Error(`Websocket closed with status code: ${event.code} (${event.reason})`));\n                    }\n                    else {\n                        this.onclose();\n                    }\n                }\n            }\n        });\n    }\n\n    send(data: any): Promise<void> {\n        if (this.webSocket && this.webSocket.readyState === WebSocket.OPEN) {\n            this.webSocket.send(data);\n            return Promise.resolve();\n        }\n\n        return Promise.reject(\"WebSocket is not in the OPEN state\");\n    }\n\n    stop(): Promise<void> {\n        if (this.webSocket) {\n            this.webSocket.close();\n            this.webSocket = null;\n        }\n        return Promise.resolve();\n    }\n\n    onreceive: DataReceived;\n    onclose: TransportClosed;\n}\n\nexport class ServerSentEventsTransport implements ITransport {\n    private readonly httpClient: HttpClient;\n    private readonly accessTokenFactory: () => string;\n    private readonly logger: ILogger;\n    private eventSource: EventSource;\n    private url: string;\n\n    constructor(httpClient: HttpClient, accessTokenFactory: () => string, logger: ILogger) {\n        this.httpClient = httpClient;\n        this.accessTokenFactory = accessTokenFactory || (() => null);\n        this.logger = logger;\n    }\n\n    connect(url: string, requestedTransferMode: TransferMode, connection: IConnection): Promise<TransferMode> {\n        if (typeof (EventSource) === \"undefined\") {\n            Promise.reject(\"EventSource not supported by the browser.\");\n        }\n\n        this.url = url;\n        return new Promise<TransferMode>((resolve, reject) => {\n            let token = this.accessTokenFactory();\n            if (token) {\n                url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\n            }\n\n            let eventSource = new EventSource(url);\n\n            try {\n                eventSource.onmessage = (e: MessageEvent) => {\n                    if (this.onreceive) {\n                        try {\n                            this.logger.log(LogLevel.Trace, `(SSE transport) data received: ${e.data}`);\n                            this.onreceive(e.data);\n                        } catch (error) {\n                            if (this.onclose) {\n                                this.onclose(error);\n                            }\n                            return;\n                        }\n                    }\n                };\n\n                eventSource.onerror = (e: any) => {\n                    reject();\n\n                    // don't report an error if the transport did not start successfully\n                    if (this.eventSource && this.onclose) {\n                        this.onclose(new Error(e.message || \"Error occurred\"));\n                    }\n                }\n\n                eventSource.onopen = () => {\n                    this.logger.log(LogLevel.Information, `SSE connected to ${this.url}`);\n                    this.eventSource = eventSource;\n                    // SSE is a text protocol\n                    resolve(TransferMode.Text);\n                }\n            }\n            catch (e) {\n                return Promise.reject(e);\n            }\n        });\n    }\n\n    async send(data: any): Promise<void> {\n        return send(this.httpClient, this.url, this.accessTokenFactory, data);\n    }\n\n    stop(): Promise<void> {\n        if (this.eventSource) {\n            this.eventSource.close();\n            this.eventSource = null;\n        }\n        return Promise.resolve();\n    }\n\n    onreceive: DataReceived;\n    onclose: TransportClosed;\n}\n\nexport class LongPollingTransport implements ITransport {\n    private readonly httpClient: HttpClient;\n    private readonly accessTokenFactory: () => string;\n    private readonly logger: ILogger;\n\n    private url: string;\n    private pollXhr: XMLHttpRequest;\n    private pollAbort: AbortController;\n\n    constructor(httpClient: HttpClient, accessTokenFactory: () => string, logger: ILogger) {\n        this.httpClient = httpClient;\n        this.accessTokenFactory = accessTokenFactory || (() => null);\n        this.logger = logger;\n        this.pollAbort = new AbortController();\n    }\n\n    connect(url: string, requestedTransferMode: TransferMode, connection: IConnection): Promise<TransferMode> {\n        this.url = url;\n\n        // Set a flag indicating we have inherent keep-alive in this transport.\n        connection.features.inherentKeepAlive = true;\n\n        if (requestedTransferMode === TransferMode.Binary && (typeof new XMLHttpRequest().responseType !== \"string\")) {\n            // This will work if we fix: https://github.com/aspnet/SignalR/issues/742\n            throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\n        }\n\n        this.poll(this.url, requestedTransferMode);\n        return Promise.resolve(requestedTransferMode);\n    }\n\n    private async poll(url: string, transferMode: TransferMode): Promise<void> {\n        let pollOptions: HttpRequest = {\n            timeout: 120000,\n            abortSignal: this.pollAbort.signal,\n            headers: new Map<string, string>(),\n        };\n\n        if (transferMode === TransferMode.Binary) {\n            pollOptions.responseType = \"arraybuffer\";\n        }\n\n        let token = this.accessTokenFactory();\n        if (token) {\n            pollOptions.headers.set(\"Authorization\", `Bearer ${token}`);\n        }\n\n        while (!this.pollAbort.signal.aborted) {\n            try {\n                let pollUrl = `${url}&_=${Date.now()}`;\n                this.logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}`);\n                let response = await this.httpClient.get(pollUrl, pollOptions)\n                if (response.statusCode === 204) {\n                    this.logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server\");\n\n                    // Poll terminated by server\n                    if (this.onclose) {\n                        this.onclose();\n                    }\n                    this.pollAbort.abort();\n                }\n                else if (response.statusCode !== 200) {\n                    this.logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}`);\n\n                    // Unexpected status code\n                    if (this.onclose) {\n                        this.onclose(new HttpError(response.statusText, response.statusCode));\n                    }\n                    this.pollAbort.abort();\n                }\n                else {\n                    // Process the response\n                    if (response.content) {\n                        this.logger.log(LogLevel.Trace, `(LongPolling transport) data received: ${response.content}`);\n                        if (this.onreceive) {\n                            this.onreceive(response.content);\n                        }\n                    }\n                    else {\n                        // This is another way timeout manifest.\n                        this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\n                    }\n                }\n            } catch (e) {\n                if (e instanceof TimeoutError) {\n                    // Ignore timeouts and reissue the poll.\n                    this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\n                } else {\n                    // Close the connection with the error as the result.\n                    if (this.onclose) {\n                        this.onclose(e);\n                    }\n                    this.pollAbort.abort();\n                }\n            }\n        }\n    }\n\n    async send(data: any): Promise<void> {\n        return send(this.httpClient, this.url, this.accessTokenFactory, data);\n    }\n\n    stop(): Promise<void> {\n        this.pollAbort.abort();\n        return Promise.resolve();\n    }\n\n    onreceive: DataReceived;\n    onclose: TransportClosed;\n}\n\nasync function send(httpClient: HttpClient, url: string, accessTokenFactory: () => string, content: string | ArrayBuffer): Promise<void> {\n    let headers;\n    let token = accessTokenFactory();\n    if (token) {\n        headers = new Map<string, string>();\n        headers.set(\"Authorization\", `Bearer ${accessTokenFactory()}`)\n    }\n\n    await httpClient.post(url, {\n        content,\n        headers\n    });\n}\n"]}