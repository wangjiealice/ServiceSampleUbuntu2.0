{"version":3,"file":"Loggers.js","sourceRoot":"","sources":["../../src/Loggers.ts"],"names":[],"mappings":";AAAA,sDAAsD;AACtD,+GAA+G;;AAE/G,qCAA6C;AAE7C;IAAA;IAGA,CAAC;IAFG,wBAAG,GAAH,UAAI,QAAkB,EAAE,OAAe;IACvC,CAAC;IACL,iBAAC;AAAD,CAAC,AAHD,IAGC;AAHY,gCAAU;AAKvB;IAGI,uBAAY,eAAyB;QACjC,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;IAC3C,CAAC;IAED,2BAAG,GAAH,UAAI,QAAkB,EAAE,OAAe;QACnC,EAAE,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;YACnC,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACf,KAAK,kBAAQ,CAAC,KAAK;oBACf,OAAO,CAAC,KAAK,CAAI,kBAAQ,CAAC,QAAQ,CAAC,UAAK,OAAS,CAAC,CAAC;oBACnD,KAAK,CAAC;gBACV,KAAK,kBAAQ,CAAC,OAAO;oBACjB,OAAO,CAAC,IAAI,CAAI,kBAAQ,CAAC,QAAQ,CAAC,UAAK,OAAS,CAAC,CAAC;oBAClD,KAAK,CAAC;gBACV,KAAK,kBAAQ,CAAC,WAAW;oBACrB,OAAO,CAAC,IAAI,CAAI,kBAAQ,CAAC,QAAQ,CAAC,UAAK,OAAS,CAAC,CAAC;oBAClD,KAAK,CAAC;gBACV;oBACI,OAAO,CAAC,GAAG,CAAI,kBAAQ,CAAC,QAAQ,CAAC,UAAK,OAAS,CAAC,CAAC;oBACjD,KAAK,CAAC;YACd,CAAC;QACL,CAAC;IACL,CAAC;IACL,oBAAC;AAAD,CAAC,AAzBD,IAyBC;AAzBY,sCAAa;AA2B1B,IAAiB,aAAa,CAgB7B;AAhBD,WAAiB,aAAa;IAC1B,sBAA6B,OAA4B;QACrD,EAAE,CAAC,CAAC,OAAO,KAAK,SAAS,CAAC,CAAC,CAAC;YACxB,MAAM,CAAC,IAAI,aAAa,CAAC,kBAAQ,CAAC,WAAW,CAAC,CAAC;QACnD,CAAC;QAED,EAAE,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,IAAI,UAAU,EAAE,CAAC;QAC5B,CAAC;QAED,EAAE,CAAC,CAAW,OAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;YACzB,MAAM,CAAU,OAAO,CAAC;QAC5B,CAAC;QAED,MAAM,CAAC,IAAI,aAAa,CAAW,OAAO,CAAC,CAAC;IAChD,CAAC;IAde,0BAAY,eAc3B,CAAA;AACL,CAAC,EAhBgB,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAgB7B","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\n\nimport { ILogger, LogLevel } from \"./ILogger\"\n\nexport class NullLogger implements ILogger {\n    log(logLevel: LogLevel, message: string): void {\n    }\n}\n\nexport class ConsoleLogger implements ILogger {\n    private readonly minimumLogLevel: LogLevel;\n\n    constructor(minimumLogLevel: LogLevel) {\n        this.minimumLogLevel = minimumLogLevel;\n    }\n\n    log(logLevel: LogLevel, message: string): void {\n        if (logLevel >= this.minimumLogLevel) {\n            switch (logLevel) {\n                case LogLevel.Error:\n                    console.error(`${LogLevel[logLevel]}: ${message}`);\n                    break;\n                case LogLevel.Warning:\n                    console.warn(`${LogLevel[logLevel]}: ${message}`);\n                    break;\n                case LogLevel.Information:\n                    console.info(`${LogLevel[logLevel]}: ${message}`);\n                    break;\n                default:\n                    console.log(`${LogLevel[logLevel]}: ${message}`);\n                    break;\n            }\n        }\n    }\n}\n\nexport namespace LoggerFactory {\n    export function createLogger(logging?: ILogger | LogLevel) {\n        if (logging === undefined) {\n            return new ConsoleLogger(LogLevel.Information);\n        }\n\n        if (logging === null) {\n            return new NullLogger();\n        }\n\n        if ((<ILogger>logging).log) {\n            return <ILogger>logging;\n        }\n\n        return new ConsoleLogger(<LogLevel>logging);\n    }\n}"]}